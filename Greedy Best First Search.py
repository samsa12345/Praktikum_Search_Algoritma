# -*- coding: utf-8 -*-
"""Tugas Informed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nC_NwDTMKku15pVhWVA1r8Bqm3RCtwmg
"""

from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((heuristic[start], start))  # Tambahkan simpul

    came_from = {}  # Menyimpan jalur
    explored = set()  # Menyimpan simpul yang sudah dikunjungi

    while not frontier.empty():
        _, current_node = frontier.get()  # Ambil simpul dengan nilai heuristik terkecil

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            return path  # Kembalikan jalur yang ditemukan

        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node  # Simpan jalur

    print("Simpul tujuan tidak ditemukan!")
    return None

# Daftar heuristik
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf menggunakan dictionary
graph = {
    'S': ['A', 'B'],
    'A': ['B', 'D'],
    'B': ['C', 'D'],
    'C': ['D', 'G'],
    'D': ['G'],
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi greedy search
greedy_search(graph, heuristic, start_node, goal_node)